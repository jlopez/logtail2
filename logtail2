#!/usr/bin/env ruby
require 'getoptlong'
require 'pp'

def parse_cmd_line
  opts = GetoptLong.new(
    [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
    [ '--file', '-f', GetoptLong::REQUIRED_ARGUMENT ],
    [ '--offset', '-o', GetoptLong::REQUIRED_ARGUMENT ],
    [ '--test', '-t', GetoptLong::NO_ARGUMENT ],
  )

  opt = {}
  opts.each {|k, v| opt[k.gsub(/^-*/, '').to_sym] = v } rescue exit 1
  unless opt[:file]
    $stderr.puts "No logfile to read. Use -f [LOGFILE]."
    exit 1
  end
  opt[:offset] ||= "#{opt[:file]}.offset"

  if opt[:help]
    puts <<-EOF
  logtail2 [OPTION]...
  Tails a log file keeping track of what lines have been processed.

    -f, --file=FILE    read lines from FILE, may contain * or ? wildcards.
    -o, --offset=FILE  keep offset information in FILE.
    -t, --test         test mode, do not update offset file.
    --help, -h      show this help

  If offset file is not specified, defaults to using the log file
  with the .offset extension added.

  Exit status is 0 if OK, non-zero otherwise.

  Report bugs to <jesus@mindjolt.com>.
    EOF
    exit 0
  end
  opt
end

class MultiFileReader
  attr_reader :current_filename, :offset, :line_count, :state_file
  attr_accessor :test

  def initialize filenames, state_file
    @filenames = Dir[filenames].sort
    @state_file = state_file
    @line_count = 0
    @current_filename = nil
    @offset = 0
    load
  end

  def each
    raise "Can't reuse" unless @line_count == 0
    first = true
    filenames.each do |fn|
      next if first and current_filename and current_filename != fn
      self.current_filename = fn
      File.open(fn, 'rb') do |f|
        f.seek(offset) if first
        first = false
        f.each_line do |line|
          self.offset = f.tell
          begin
            yield line
            @line_count += 1
          rescue EOFError
            next
          end
        end
      end
    end
    persist!
  end

  def to_s
    "MultiFileReader(#{current_filename}:#{offset})"
  end

private
  attr_reader :filenames

  def current_filename= fn
    return if @current_filename == fn
    @current_filename = fn
    persist!
  end

  def offset= offset
    @offset = offset
    persist
  end

  def persist
    persist! if line_count % 1000 == 0
  end

  def persist!
    return if test
    File.open(state_file, 'wb') do |f|
      f.write([ offset, current_filename ].pack('Qa*'))
    end
  end

  def load
    @offset, @current_filename = File.read(state_file).unpack('Qa*')
  rescue
  end
end

opt = parse_cmd_line
reader = MultiFileReader.new(opt[:file], opt[:offset])
reader.test = !opt[:test].nil?
reader.each {|line| puts line }
